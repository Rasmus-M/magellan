*********************************************************************
*
* Magellan based smooth scrolling - vertical bitmap version
* For the TI-99/4A home computer
*
* This code produces a smooth vertical scrolling display based on a 
* generic, unmodified Magellan export file. See the COPY directive 
* at the end of this listing for further details on how to generate 
* the file.
*
* This code is intended as a starting point for creating demos or
* games featuring smooth scrolling. It is deliberately kept simple
* and could be optimized in many ways, e.g. by more aggressive use 
* of scratchpad. You're welcome to copy and modify it any way you
* like and include it in your own software. 
*
* More details about how the scrolling algorithm works are availble
* from this thread:
* http://atariage.com/forums/topic/210888-smooth-scrolling/
*
* The Magellan map editor is available here:
* http://atariage.com/forums/topic/161356-magellan/
*
* You're welcome to contact me at AtariAge (RasmusM) or by email if 
* you have questions or suggestions.
*
* Rasmus Moustgaard <rasmus.moustgaard@gmail.com>
*
* - Version 1.0, 30 October, 2013
* First version
*
* - Version 1.1, 31 October, 2013
* This version uses one 16 byte character strip for each transition
* instead of 8 separate data blocks (one for each scrolled frame).
*
*********************************************************************

	   DEF	START

*	   Memory Map
WRKSP  EQU	>8300				* Workspace
R0LB   EQU	>8301				* R0 LSB
STACK  EQU	>8320				* Stack
VDPRD  EQU	>8800				* VDP read data
VDPSTA EQU	>8802				* VDP status
VDPWD  EQU	>8C00				* VDP write data
VDPWA  EQU	>8C02				* VDP set read/write address

*	   VPD RAM Map
PTRNTB EQU	>0000				* Pattern table base
PTRNT1 EQU	>0800				* Pattern table part 2
PTRNT2 EQU	>1000				* Pattern table part 3
SPRPTB EQU	>1800				* Sprite pattern table (>03)
COLRTB EQU	>2000				* Color table base
NAMET0 EQU	>2800				* Name table base 0 (>0A)
NAMET1 EQU	>2C00				* Name table base 1 (>0B)
NAMET2 EQU	>3000				* Name table base 2 (>0C)
NAMET3 EQU	>3400				* Name table base 3 (>0D)
SPRATB EQU	>3700				* Sprite attribute table (>6E)

	   AORG	>A000				* Load into upper memory

*	   Program starts here
START  LIMI	0					* Disable interrupts
	   LWPI	WRKSP				* Setup workspace
	   LI	R10,STACK			* Use R10 as stack pointer
*	   Setup graphics mode
	   BL	@GMODE				* Call setup routine
*	   Init variables
	   MOV	@MS0+2,R0			* Get map height in rows
	   AI	R0,-24				* Subtract one screen
	   SLA	R0,3				* Convert to pixels
	   MOV  R0,@SCRLMX			* This is where scrolling should stop
	   CLR	@SCRLY				* Start at the top of the map
	   MOV	@ONE,@SCRLDY		* Scroll downwards
*	   Display initial screen
	   BL	@INISCR
*	   Scroll loop
LOOP   MOV	@SCRLY,R0			* Get scroll position
	   ANDI	R0,>000F			* Frame = position mod 16
	   MOV	R0,@SCRLFR			* Write it back
*	   Wait for vsync
	   BL	@VSYNC
*	   Set name table
	   BL	@SETNT
*	   Update patterns
	   BL	@UPDPT
*	   Update name table buffer
	   BL	@UPDNT
*	   Change scroll offset
	   A	@SCRLDY,@SCRLY
	   JEQ	CHGDY					* Check if at top
	   C	@SCRLY,@SCRLMX			* Check if at bottom
	   JH	CHGDY
*	   Loop forever
	   JMP	LOOP
*	   Change direction
CHGDY  NEG	@SCRLDY
	   BL	@UPDNTF
	   JMP	LOOP

*********************************************************************
*
* Display initial screen
*
* If sprites beyond 0-7 are to be used on a real 9918A VDP we need to update
* the second and third part of the pattern table as well (with the same 
* patterns). The color table is always OK at >800 bytes. See GMODE.
*
* Note that the pattern frame that should be uploaded here depends on the 
* initial direction of the scrolling. If you want to start at the bottom 
* you should start at frame 7 or 15, to allow enouh frames for building 
* the next name table. This means that the address PSTRIP+7 should be used
* instead of PSTRIP, and @SCRLY should be initilized so that the 3 least 
* significant bits are all ones, e.g. 511 - not 512.
*
INISCR MOV  R11,*R10+			* Push return address onto the stack
*	   Upload patterns
	   LI	R0,PTRNTB			* Destination address in VDP RAM
	   LI	R1,PSTRIP			* Address of first scrolled pattern frame
	   MOV	@TCHNUM,R2			* Number of patterns of 8 bytes
	   BL	@VM8BW8				* Call copying routine
*	   Upload 2nd and 3rd part of the pattern table
*	   LI	R0,PTRNT1			* Destination address in VDP RAM
*	   LI	R1,PSTRIP			* Address of first scrolled pattern frame
*	   MOV	@TCHNUM,R2			* Number of patterns of 8 bytes
*	   BL	@VM8BW8				* Call copying routine
*	   LI	R0,PTRNT2			* Destination address in VDP RAM
*	   LI	R1,PSTRIP			* Address of first scrolled pattern frame
*	   MOV	@TCHNUM,R2			* Number of patterns of 8 bytes
*	   BL	@VM8BW8				* Call copying routine
*	   Upload colors
	   LI	R0,COLRTB			* Destination address in VDP RAM
	   LI	R1,CSTRIP			* Address of first scrolled color frame
	   MOV	@TCHNUM,R2			* Number of pattern colors of 8 bytes
	   BL	@VM8BW8				* Call copying routine
*	   Init name tables
	   MOV	@SCRLY,R4			* Get initial scroll offset in pixels
	   SRL	R4,3				* Convert to row offset
	   SLA	R4,5				* Convert to character offset
*	   Table 0
	   LI	R0,NAMET0			* Destination address in VDP RAM
	   LI	R1,MD0				* Base address of map data
	   A	R4,R1				* Add character offset
	   LI	R2,>300/8			* Number of groups of 8 bytes to copy				
	   BL	@VM8BW				* Call low character set copying routine
*	   Table 1
	   LI	R0,NAMET1			* Destination address in VDP RAM
	   LI	R1,MD0				* Base address of map data
	   A	R4,R1				* Add character offset
	   LI	R2,>300/8			* Number of groups of 8 bytes to copy				
	   BL	@VM8BHW				* Call high character set copying routine
*	   Return
	   DECT R10					* Pop return address off the stack
	   MOV  *R10,R11
	   B	*R11
*// INISCR

*********************************************************************
*
* Wait for vsync
*
* Modifies R0
*
VSYNC  MOVB	@VDPSTA,R0			* Clear flag if already set
VSYNC1 MOVB	@VDPSTA,R0
	   ANDI	R0,>8000			* Check interrupt flag
	   JEQ	VSYNC1				* Loop until set
	   B	*R11
*// VSYNC

*********************************************************************
*
* Set name table
*
* Altenate between tables 0 and 1 in frames 0-7
* Alternate between tables 2 and 3 in frames 8-15
*
* Tables 0 and 2 contain 'names' from the low character set (0-127)
* Tables 1 and 3 contain 'names' from the high character set (128-255)
*
* Note that if we have fixed the location of the names tabels
* we could also calculate the value of register 3 instead of using
* 'if' statements, e.g.:
* reg3 = >0A + f & 8 >> 2 + f & 1
* for name tables >0A - >0C.
* 
* Modifies R0
*
SETNT  MOV  R11,*R10+			* Push return address onto the stack
	   MOV	@SCRLFR,R0			* Get scroll frame (0-15)
	   COC	@EIGHT,R0			* Check which table set to use
	   JEQ	SETNT2
	   COC	@ONE,R0				* Check which table to use
	   JEQ	SETNT1
	   LI	R0,>020A			* NAMET0
	   JMP	SETNT4
SETNT1 LI	R0,>020B			* NAMET1
	   JMP	SETNT4
SETNT2 COC	@ONE,R0				* Check which table to use	  
	   JEQ	SETNT3
	   LI	R0,>020C			* NAMET2
	   JMP	SETNT4
SETNT3 LI	R0,>020D			* NAMET3
*	   Update register 3
SETNT4 BL	@VWTR				
*	   Return
	   DECT R10					* Pop return address off the stack
	   MOV  *R10,R11
	   B	*R11
*// SETNT

*********************************************************************
*
* Update pattern and color tables
*
* Alternate between updating low (0-127) or high (128-255) half of
* the character set. The set that is updated is not used (and therefore
* not visible) in the currently displayed name table. This provides the
* desired double buffering effect.
*
* Magellan is exporting the patterns and colors in strips of 16 bytes,
* each strip representing the transition between two original characters.
* In terms of the Transition Character Pairs table it's the 'to' character
* (pattern or color) followed by the 'from' character (pattern or color). 
*
* If sprites beyond 0-7 are to be used on a real 9918A VDP we need to update
* the second and third part of the pattern table as well (with the same 
* patterns). The color table is always OK at >800 bytes. See GMODE.
* 
* Modifies R0-R4
*
UPDPT  MOV  R11,*R10+			* Push return address onto the stack
	   MOV	@SCRLFR,R3			* Read scroll frame (0-15) into register
*	   Calculate VDP RAM destination address
	   COC	@ONE,R3				* Check which character set to update
	   JEQ	UPDPT1
	   LI	R0,PTRNTB+>400		* Update high character set (128-255)
	   JMP	UPDPT2
UPDPT1 LI	R0,PTRNTB			* Update low character set (128-255)	   
*	   Calculate CPU RAM source address	  
UPDPT2 MOV	R3,R1				* Start with scroll frame
	   A	@SCRLDY,R1			* Add direction (1 or -1)
	   ANDI	R1,>0007			* Mod 8
	   AI	R1,PSTRIP			* Add base address of pattern strips
*	   Save calculated values
	   MOV	R0,R4
	   MOV	R1,R5
*	   Copy paterns
	   MOV	@TCHNUM,R2			* Number of patterns
	   BL	@VM8BW8
*	   Update 2nd and 3rd part of the pattern table
*	   MOV	R4,R0
*	   AI	R0,>800
*	   MOV	R5,R1
*	   MOV	@TCHNUM,R2			* Number of patterns
*	   BL	@VM8BW8
*	   MOV	R4,R0
*	   AI	R0,>1000
*	   MOV	R5,R1
*	   MOV	@TCHNUM,R2			* Number of patterns
*	   BL	@VM8BW8
*	   Copy colors
	   MOV	R4,R0
	   AI	R0,COLRTB
	   MOV	R5,R1
	   AI	R1,CSTRIP-PSTRIP	* Add offset betweem patterns and colors
	   MOV	@TCHNUM,R2			* Number of patterns
	   BL	@VM8BW8
*	   Return
	   DECT R10					* Pop return address off the stack
	   MOV  *R10,R11
	   B	*R11
*// UPDPT

*********************************************************************
*
* Update name table off-screen buffer
*
* The prepared buffers have a one row (8 pixels) offset from
* from the currently visible buffers, allowing a smooth transition
* after we have scrolled 7 pixels.
*
* We altenate between updating table buffers 2 and 3 in frames 0-7
* We alternate between updating table buffers 0 and 1 in frames 8-15
*
* Since we have 8 frames to update two buffers we need to update
* 1/4 buffer each frame, i.e. 6 screen rows. First frame we update 
* rows 0-5 of the first buffer. Second frame we update the same 6 
* rows of the second buffer, but this time we set the most significant
* bit to use the high character set. Third frame we update rows 6-11 
* of the first buffer, and so on.
*
* Note: As for SETNT we could also calculate the buffer number
* instead of using 'if' statements.
* 
* Modifies R0-R4
*
UPDNT  MOV  R11,*R10+			* Push return address onto the stack
	   MOV	@SCRLFR,R3			* Get scroll frame (0-15)
*	   Calculate row offset to the 1/4 of the buffer to update
	   MOV	R3,R0				* Start with frame number
	   ANDI	R0,>0006			* Transform to sequence: 0,0,2,2,4,4,6,6...
	   MOV	R0,R2				* Copy to R2
	   SLA	R0,1				* Multiply by 2
	   A	R0,R2				* Add to R2 to multiply by 6 and get
*								* row offset: 0,0,6,6,12,12,18,18...
	   MOV	R2,R0				* Copy back into R0 for later				
*	   Calculate map source address in R1
	   MOV	@SCRLY,R1			* Get scroll offset in pixels
	   SRL	R1,3				* Divide by 8 to get row offset
	   A	@SCRLDY,R1			* Add dy: prepared buffer has a 1 row offset
	   A	R2,R1				* Add the row offset we calculated before
	   SLA	R1,5				* Multiply by 32 to get character offset
	   MOV	R1,R2				* Copy to R2
	   LI	R1,MD0				* Get the map base address
	   A	R2,R1				* Add the character offset
*	   Calculate buffer destination address in R0
	   SLA	R0,5				* Convert row offset to chcracter offset
*	   Decide which buffer to update
	   COC	@EIGHT,R3			* Bit weight >08 determines the group
	   JNE	UPDNT2				* If not set we update buffer 2 or 3
	   COC	@ONE,R3				* Bit weight >01 determines the buffer
	   JEQ	UPDNT1
	   AI	R0,NAMET0			* Add base address to character offset
	   JMP	UPDNT4
UPDNT1 AI	R0,NAMET1			* Add base address to character offset
	   JMP	UPDNT4
UPDNT2 COC	@ONE,R3				* Bit weight >01 determines the buffer	  
	   JEQ	UPDNT3
	   AI	R0,NAMET2			* Add base address to character offset
	   JMP	UPDNT4
UPDNT3 AI	R0,NAMET3			* Add base address to character offset
*	   Copy to VDP RAM buffer
UPDNT4 LI	R2,6*32/8			* Number of 8 character groups to copy
	   COC	@ONE,R3				* High or low character set copy?
	   JEQ	UPDNT5
	   BL	@VM8BW				* Low character set
	   JMP	UPDNT6 
UPDNT5 BL	@VM8BHW				* High character set
*	   Return
UPDNT6 DECT R10					* Pop return address off the stack
	   MOV  *R10,R11
	   B	*R11
*// UPDNT

*********************************************************************
*
* Update full name table off-screen buffers
*
* If the direction of scrolling, @SCRLDY, is changed in the middle of
* a frame cycle, the part of the off-screen buffers that has already 
* been prepared will become invalid. When scrolling up it should be safe
* to change direction (to down) in frames 0 and 8, and when scrolling 
* down it should be safe to change direction (to up) in frames 7 and 15.
* Otherwise this routine should be called.
*
* This implementation is simply calling the incremental update routine,
* UPDNT, 8 times. It could be done more efficient, but code reusing is
* also a virtue.
*
* Modifies R0-R4
*
UPDNTF MOV  R11,*R10+			* Push return address onto the stack
	   MOV  @SCRLFR,R3
	   MOV  R3,*R10+			* Push current scroll frame onto the stack
	   ANDI	R3,>0008			* Move to beginning of frame cycle (0 or 8)
	   MOV	R3,@SCRLFR
UPNTF1 BL 	@UPDNT				* Call the incremental update routine
	   INC	@SCRLFR				* Next scroll frame
	   MOV	@SCRLFR,R3 
	   ANDI	R3,>0007			* Check for end of cycle
	   JNE	UPNTF1	   
*	   Return
	   DECT R10					* Pop scroll frame off the stack
	   MOV  *R10,@SCRLFR
	   DECT R10					* Pop return address off the stack
	   MOV  *R10,R11
	   B    *R11
*// UPDNTF

*********************************************************************
*
* Setup graphics mode to 'half bitmap' mode
*
* If sprites beyond 0-7 are to be used on a real 9918A VDP,
* reg 4 should be set to >03 for a >1800 byte table. The color
* table is always OK at >800 bytes.
*
GMODE  MOV  R11,*R10+			* Push return address onto the stack
	   LI	R0,>0002			* Reg 0: Bitmap mode,
	   BL   @VWTR				* external video off
	   LI   R0,>01C2			* Reg 1: 16K, display on, no interrupt,
	   BL   @VWTR				* size = 1, mag = 0.
	   LI   R0,>020A			* Reg 2: Name table 
	   BL   @VWTR				* NAMET0 = >2800 (>0A x >400)
	   LI   R0,>039F			* Reg 3: Color Table
	   BL   @VWTR				* COLRTB = >2000, >800 bytes
	   LI   R0,>0400			* Reg 4: Pattern Table
*	   LI   R0,>0403			* Reg 4: Pattern Table (9918A + sprites)
	   BL   @VWTR				* PTRNTB = >0000, >800 bytes			
	   LI   R0,>056E			* Reg 5: Sprite Attribute Table
	   BL   @VWTR				* SPRATB = >3700 (>6E * >80)
	   LI   R0,>0603			* Reg 6: Sprite Pattern Table
	   BL   @VWTR				* SPRPTB = >1800 (>03 * >800)
	   LI   R0,>0700			* Reg 7: text-mode color and backdrop color
	   BL   @VWTR				* Black backdrop
*	   Clear VDP RAM
	   CLR	R0					* Start address 0
	   CLR	R1					* Fill with 0
	   LI	R2,>4000			* 16K
	   BL	@VSMW	   
*	   Return
	   DECT R10					* Pop return address off the stack
	   MOV  *R10,R11
	   B	*R11
*// GMODE	   

*********************************************************************
*
* VDP Multiple 8 Byte Write
*
* This routine (or just the inner loop) can be moved into scratchpad
* memory for a performance boost of about 10%.
*
* R0: Starting write address in VDP RAM
* R1: Starting read address in CPU RAM
* R2: Number of groups of 8 bytes to send to the VDP RAM
* R3: Number of bytes to skip after reading 8 bytes 
*
* R0 is modified, R1 is next read address, R2 is zero
*
VM8BW8 LI	R3,8				* Call here to skip 8 bytes
	   JMP	VM8BW0
VM8BW  CLR	R3	   				* Call here to skip zero bytes
VM8BW0 MOV  R11,*R10+			* Push return address onto the stack
	   BL	@VWAD				* Setup write address
	   LI	R0,VDPWD			* Load VDP write data address into register
VM8BW1 MOVB *R1+,*R0			* Write byte to VDP RAM
	   MOVB *R1+,*R0			* Repeat 2
	   MOVB *R1+,*R0			* Repeat 3
	   MOVB *R1+,*R0			* Repeat 4
	   MOVB *R1+,*R0			* Repeat 5
	   MOVB *R1+,*R0			* Repeat 6
	   MOVB *R1+,*R0			* Repeat 7
	   MOVB *R1+,*R0			* Repeat 8 times
	   A	R3,R1				* Skip source bytes
	   DEC  R2					* Group counter
	   JNE  VM8BW1				* Loop if not done
*	   Return
	   DECT R10					* Pop return address off the stack
	   MOV  *R10,R11
	   B	*R11
*// VM8BW

*********************************************************************
*
* VDP Multiple 8 Byte High Write
*
* Like VM8BW but sets the most significant bit of each byte written.
* Note: only works correctly for even read addresses.
*
* R0: Starting write address in VDP RAM
* R1: Starting read address in CPU RAM (must be even)
* R2: Number of groups of 8 bytes to send to the VDP RAM
*
* R0 is modified, R1 is next read address, R2 is zero, R3 is modified
*
VM8BHW MOV  R11,*R10+			* Push return address onto the stack
	   BL	@VWAD				* Setup write address
	   LI	R3,VDPWD			* Load VDP write data address into register
VM8BH1 MOV	*R1+,R0				* Read word from CPU RAM
	   ORI	R0,>8080			* Set most significant bits
	   MOVB R0,*R3				* Send MSB to VDP
	   MOVB @R0LB,*R3			* Send LSB to VDP
	   MOV	*R1+,R0				* Repeat 2
	   ORI	R0,>8080			*
	   MOVB R0,*R3				*
	   MOVB @R0LB,*R3			*
	   MOV	*R1+,R0				* Repeat 3
	   ORI	R0,>8080			*
	   MOVB R0,*R3				*
	   MOVB @R0LB,*R3			*
	   MOV	*R1+,R0				* Repeat 4 times
	   ORI	R0,>8080			*
	   MOVB R0,*R3				*
	   MOVB @R0LB,*R3			*
	   DEC  R2					* Group counter
	   JNE  VM8BH1				* Loop if not done
*	   Return
	   DECT R10					* Pop return address off the stack
	   MOV  *R10,R11
	   B	*R11
*// VM8BHW

*********************************************************************
*
* VDP Set Write Address
*
* R0: Address to set VDP address counter to
*
VWAD   MOVB @R0LB,@VDPWA		* Send low byte of VDP RAM write address
	   ORI  R0,>4000			* Set the two MSbits to 01 for write
	   MOVB R0,@VDPWA			* Send high byte of VDP RAM write address
	   ANDI R0,>3FFF			* Restore R0 top two MSbits
	   B	*R11
*// VWAD

*********************************************************************
*
* VDP Single Byte Write
* (not used by demo)
*
* R0: Write address in VDP RAM
* R1: MSB of R1 sent to VDP RAM
*
* R0 is modified, but can be restored with: ANDI R0,>3FFF
*
VSBW   MOVB @R0LB,@VDPWA		* Send low byte of VDP RAM write address
	   ORI  R0,>4000			* Set read/write bits 14 and 15 to write (01)
	   MOVB R0,@VDPWA			* Send high byte of VDP RAM write address
	   MOVB R1,@VDPWD			* Write byte to VDP RAM
	   B	*R11
*// VSBW

*********************************************************************
*
* VDP Single Byte Multiple Write
*
* R0: Starting write address in VDP RAM
* R1: MSB of R1 sent to VDP RAM
* R2: Number of times to write the MSB byte of R1 to VDP RAM
*
* R0 is modified, but can be restored with: ANDI R0,>3FFF
*
VSMW   MOVB @R0LB,@VDPWA		* Send low byte of VDP RAM write address
	   ORI  R0,>4000			* Set read/write bits 14 and 15 to write (01)
	   MOVB R0,@VDPWA			* Send high byte of VDP RAM write address
VSMWLP MOVB R1,@VDPWD			* Write byte to VDP RAM
	   DEC  R2					* Byte counter
	   JNE  VSMWLP				* Check if done
	   B	*R11
*// VSMW

*********************************************************************
*
* VDP Multiple Byte Write
* (not used by demo)
*
* R0: Starting write address in VDP RAM
* R1: Starting read address in CPU RAM
* R2: Number of bytes to send to the VDP RAM
*
* R0 is modified, but can be restored with: ANDI R0,>3FFF
*
VMBW   MOVB @R0LB,@VDPWA		* Send low byte of VDP RAM write address
	   ORI  R0,>4000			* Set read/write bits 14 and 15 to write (01)
	   MOVB R0,@VDPWA			* Send high byte of VDP RAM write address
VMBWLP MOVB *R1+,@VDPWD			* Write byte to VDP RAM
	   DEC  R2					* Byte counter
	   JNE  VMBWLP				* Check if done
	   B	*R11
*// VMBW

*********************************************************************
*
* VDP Write To Register
*
* R0 MSB: VDP register to write to
* R0 LSB: Value to write
*
VWTR   MOVB @R0LB,@VDPWA		* Send low byte (value) to write to VDP register
	   ORI  R0,>8000			* Set up a VDP register write operation (10)
	   MOVB R0,@VDPWA			* Send high byte (address) of VDP register
	   B	*R11
*// VWTR	   

*********************************************************************
*
* Variables and data
*

*	   Variables
SCRLY  DATA	>0000				* Vertical scroll offset
SCRLFR DATA	>0000				* Scroll frame (0-15) = SCRLY mod 16
SCRLDY DATA	>0001				* Scroll direction (1 or -1)
SCRLMX DATA >0000				* Maximimum scroll offset

*	   Constants
ONE	   DATA	>0001				* Constant 1
EIGHT  DATA	>0008				* Constant 8

*********************************************************************
*
*	   Include Magellan export file
*
*	   Use Magellan 1.8.1 (or higher) to generate the file. The map 
*	   should be designed with the 'Bitmap Mode Colors' option selected.  
*
*	   Choose Export > Assembler Character Transition Data.
*
*	   Export with the options:
*	   Bottom to Top, Wrap Edges: off, No compression, Generate Scrolled 
*	   Character Frames: 2-character Strips, Current Map Only.
*
*	   The map is assumed to be 32 characters wide and must not contain 
*	   more than 128 unique vertical character transitions.
*	   The number of rows should larger than 24 and preferrably even. 
*	   Because a transition map has one row fewer than the original, 
*	   this means that the original should have an odd number of rows.
*
*	   The file sections 'Original Character Patterns' and 'Colorset 
*	   Definitions' are not used by this program and can be deleted to 
*	   save space. The section 'Transition Character Pairs' is not used 
*	   either, but I recommend to keep this as an essential look-up table
*	   if you are writing a game.

*	   COPY	"Marble.a99"
	   COPY	"Titanium.a99"

	   END	START